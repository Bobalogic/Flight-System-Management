#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define INPUTMAX 10000
#define L_COUNTRY 31
#define L_CITY 51
#define AIRPORTMAX 41
#define L_ID 6
#define A 150
#define AIRPLISTMAX 200

struct airport
{
    char ID[5];
    char country[32];
    char city[52];
    int flights_number;
};

int airp_number = 0;
struct airport max_air[AIRPORTMAX];

void comm_a(char new_airpID[L_ID], char new_ctry[L_COUNTRY], char new_city[L_CITY])
{
    int i, j;
    if (airp_number >= 40)
    {
        puts("too many airports\n");
        return;
    }
    for (i = 0; i < 3; i++)
    {
        if (islower(new_airpID[i]))
        {
            puts("invalid airport ID\n");
            return;
        }
    }
    for (j = 0; j < airp_number; j++)
    {
        if (strcmp((max_air[j].ID), new_airpID) == 0)
        {
            puts("duplicate airport\n");
            return;
        }
    }
    strcpy(max_air[airp_number].ID, new_airpID);
    strcpy(max_air[airp_number].country, new_ctry);
    strcpy(max_air[airp_number].city, new_city);
    printf("airport %s\n", new_airpID);
    airp_number++;
}

void comm_l_listed(char airp_list[AIRPLISTMAX], int airp_number)
{
    int i, j, checker = 0;

    char *ID = strtok(airp_list, " ");
    while (ID != NULL)
    {
        for (j = 0; j < airp_number; j++)
        {
            if (strcmp(max_air[j].ID, ID) == 0)
            {
                checker += 1;
            }
        }
        if (checker == 0)
        {
            printf("%s: no such airport ID\n", ID);
        }
        checker = 0;
        for (i = 0; i < airp_number; i++)
        {
            if (strcmp(max_air[i].ID, ID) == 0)
            {
                printf("%s %s %s %d\n", max_air[i].ID, max_air[i].city, max_air[i].country, max_air[i].flights_number);
            };
        }
        ID = strtok(NULL, " ");
    }
}

void comm_l_empty(int airp_number)
{
    int i, j;
    char idlist[40][4] = {0};
    int ids[AIRPORTMAX] = {0};
    char temp[4] = {0};
    int x;
    for (i = 0; i < airp_number; i++)
    {
        strcpy(idlist[i], max_air[i].ID);
        ids[i] = i;
    }
    for (i = 1; i < airp_number; i++)
    {
        for (j = 0; j < (airp_number - 1); j++)
        {
            if (strcmp(idlist[j], idlist[j + 1]) > 0)
            {
                strcpy(temp, idlist[j]);
                strcpy(idlist[j], idlist[j + 1]);
                strcpy(idlist[j + 1], temp);
                x = ids[j];
                ids[j] = ids[j+1];
                ids[j+1] = x;
            }
        }
    }
    for (i = 0; i < airp_number; i++)
    {
        x = ids[i];
        printf("%s %s %s %d\n", max_air[x].ID, max_air[x].city, max_air[x].country, max_air[x].flights_number);
    }
}

int main()
{
    char comm, new_airpID[L_ID] = {0}, new_ctry[L_COUNTRY] = {0}, new_city[L_CITY] = {0};
    char airp_list[AIRPLISTMAX] = {0};

    while (1)
    {
        scanf("%c", &comm);
        if (comm == 'q')
        {
            exit(0);
        }
        if (comm == 'a')
        {
            scanf("%s %s %[^\n]", new_airpID, new_ctry, new_city);
            comm_a(new_airpID, new_ctry, new_city);
        }
        if (comm == 'l')
        {
            scanf("%[^\n]", airp_list);
            if (strlen(airp_list) == 0)
            {
                comm_l_empty(airp_number);
            }
            else
            {
                comm_l_listed(airp_list, airp_number);
            }
        }
    }
    return 0;
}
